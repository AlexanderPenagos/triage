<vbox width="100%">
	<window id="header" width="100%" height="90px" top="2px" style="background: #83B5F7;" left="2px">
		<hbox>
			<image src="images/triage.png"/>
		</hbox>
	</window>
	<zscript><![CDATA[
	Properties config = null ;

	org.zkoss.util.logging.Log log = org.zkoss.util.logging.Log.lookup(com.blogspot.devenphillips.helpdesk.zk.hibernate.HibernateUtil.class);
	boolean dbIsGood = false ;

	void buttonPressed() {
		if (dbIsGood) {
			saveConfig() ;
		} else {
			testDb() ;
		}
	}

	void closeInstructions() {
		initInstructions.detach() ;
	}

	void setRetest() {
		dbIsGood = false ;
		success.setVisible(false) ;
		StringBuffer urlStr = new StringBuffer() ;
		urlStr.append("jdbc:") ;
		urlStr.append(dbtype.getSelectedItem().getValue()) ;
		urlStr.append("://"+dbhost.getValue()+"/"+dbname.getValue()) ;
		jdbcUrl.setValue(urlStr.toString()) ;
		nextButton.setLabel("Test Connection") ;
	}

	void saveConfig() {
		// Create a new Hibernate AnnotationConfiguration and feed it the 
		// configuration settings which the user ahas entered
		org.hibernate.cfg.AnnotationConfiguration cfg = new org.hibernate.cfg.AnnotationConfiguration() ;
		try {
			cfg.setProperties(config)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.Software.class)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.Request.class)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.RequestNote.class)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.Device.class)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.Solution.class)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.Ticket.class)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.TicketNote.class)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.Group.class)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.Preference.class)
				.addAnnotatedClass(com.blogspot.devenphillips.helpdesk.data.User.class) ;
			org.hibernate.SessionFactory myFactory = cfg.buildSessionFactory() ;
			if (myFactory==null) {
				log.error("An error occurred while trying to create the Hibernate SessionFactory. The factory object was null. Please check your database settings and try again.") ;
				Messagebox.show("An error occurred while trying to create the Hibernate SessionFactory. The factory object was null. Please check your database settings and try again.","Database Error",Messagebox.OK,Messagebox.ERROR) ;
			} else {
				desktop.getWebApp().setAttribute("hibernateSession",myFactory) ;
			}

			// Add the appropriate listeners to the application configuration
			// so that Hibernate will operate properly in the ZK environment
			desktop.getWebApp().getConfiguration().addListener(com.blogspot.devenphillips.helpdesk.zk.hibernate.HibernateSessionFactoryListener.class) ;
			desktop.getWebApp().getConfiguration().addListener(com.blogspot.devenphillips.helpdesk.zk.hibernate.OpenSessionInViewListener.class) ;
			desktop.getWebApp().getConfiguration().addListener(com.blogspot.devenphillips.helpdesk.zk.hibernate.HibernateSessionContextListener.class) ;
		} catch (Exception he) {
			log.error("An error occurred while trying to create the database connection pool. The error message was '"+he.getLocalizedMessage()+"'. Please check your database settings and try again.",he) ;
			Messagebox.show("An error occurred while trying to create the database connection pool. The error message was '"+he.getLocalizedMessage()+"'. Please check your database settings and try again.","Database Error",Messagebox.OK,Messagebox.ERROR) ;
		}

		// Store the hibernate Properties in the desktop object as an attribute for later use
		desktop.setAttribute("config",config) ;

		// Load the next step of the configuration process
		desktop.getPage("indexZul").getFellow("workspace").getChildren().clear() ;
		Executions.createComponents("WEB-INF/sys/bootstrap/config2.zul",desktop.getPage("indexZul").getFellow("workspace"),null) ;
	}

	void testDb() {
		// Store the db configuration into the Properties object
		if (!Properties.class.isInstance(config)) {
			config = null ;
			config = new Properties() ;
			config.put("hibernate.c3p0.acquire_increment","1") ;
			config.put("hibernate.c3p0.idle_test_period","300") ;
			config.put("hibernate.c3p0.max_size","100") ;
			config.put("hibernate.c3p0.max_statements","0") ;
			config.put("hibernate.c3p0.min_size","5") ;
			config.put("hibernate.c3p0.timeout","100") ;
			config.put("hibernate.c3p0.preferredTestQuery","SELECT 1") ;
			config.put("hibernate.hbm2ddl.auto","update") ;
			config.put("hibernate.connection.provider_class","org.hibernate.connection.C3P0ConnectionProvider") ;
			config.put("hibernate.search.default.directory_provider","org.hibernate.search.store.FSDirectoryProvider") ;
			config.put("hibernate.search.default.indexBase",luceneDir.getValue()) ;
			config.put("hibernate.show_sql","true") ;
			config.put("hibernate.current_session_context_class","thread") ;
		}
		String errorMessage = null ;

		// Prepare to test the database configuration and connection
		boolean isConnected = true ;

		// Check to ensure that the lucene index directory exists. If it does not, prompt user for permission to create it.
		String indexDir = config.get("hibernate.search.default.indexBase") ;
		java.io.File indexDirObj = new java.io.File(indexDir) ;

		if (indexDirObj.exists()) {
			if (indexDirObj.isDirectory()) {
				if (indexDirObj.canWrite()) {
					isConnected = true ;
				} else {
					isConnected = false ;
					errorMessage = "Permission denied for index directory '"+indexDir+"'" ;
				}
			} else {
				Messagebox.show("'"+indexDir+"' exists, but is not a directory. Please choose a different path and try again.","Index Directory Error",Messagebox.OK,Messagebox.ERROR) ;
				isConnected = false ;
			}
		} else {
			if (Messagebox.show("Directory '"+indexDir+"'does not exist, would you like to create it?","Index Directory",Messagebox.YES|Messagebox.NO,Messagebox.EXCLAMATION)==Messagebox.YES) {
				try {
					if (!(new java.io.File(indexDir)).mkdirs()) {
						isConnected = false ;
						errorMessage = "Failed to create index directory '"+indexDir+"'. Please check your path and/or permissions and try again." ;
					}
				} catch (Exception e) {
					errorMessage = "Unable to create index directory '"+indexDir+"'" ;
					log.error(errorMessage,e) ;
					isConnected = false ;
				}
			} else {
				isConnected = false ;
			}
		}

		// Build a JDBC connection URL based on the user's input
		String dbType = (String)dbtype.getSelectedItem().getValue() ;
		String dbUrlStr = null ;

		if (isConnected) {
			if (dbType.compareTo("postgresql")==0) {
				config.put("hibernate.connection.driver_class","org.postgresql.Driver") ;
				config.put("hibernate.dialect","org.hibernate.dialect.PostgreSQLDialect") ;
				dbUrlStr = "postgresql" ;
			} else if (dbType.compareTo("mysql")==0) {
				config.put("hibernate.connection.driver_class","com.mysql.jdbc.Driver") ;
				config.put("hibernate.dialect","org.hibernate.dialect.MySQL5Dialect") ;
				dbUrlStr = "mysql" ;
			} else if (dbType.compareTo("sqlserver")==0) {
				config.put("hibernate.connection.driver_class","com.microsoft.sqlserver.jdbc.SQLServerDriver") ;
				config.put("hibernate.dialect","org.hibernate.dialect.SybaseDialect") ;
				dbUrlStr = "sqlserver" ;
			} else if (dbType.compareTo("db2")==0) {
				config.put("hibernate.connection.driver_class","com.ibm.db2.jdbc.app.DB2Driver") ;
				config.put("hibernate.dialect","org.hibernate.dialect.DB2Dialect") ;
				dbUrlStr = "db2" ;
			} else if (dbType.compareTo("oracle:thin")==0) {
				config.put("hibernate.connection.driver_class","oracle.jdbc.driver.OracleDriver") ;
				config.put("hibernate.dialect","org.hibernate.dialect.OracleDialect") ;
				dbUrlStr = "oracle:thin" ;
			} else {
				Messagebox.show("For some reason the database type selection failed. Please re-select the database type and try again.","ERROR",Messagebox.OK,Messagebox.ERROR) ;
				isConnected = false ;
			}
			config.put("hibernate.connection.url","jdbc:"+dbUrlStr+"://"+dbhost.getValue()+"/"+dbname.getValue()) ;
			config.put("hibernate.connection.username",dbuser.getValue()) ;
			config.put("hibernate.connection.password",dbpass.getValue()) ;

			try {
				// Attempt to load the database jdbc driver
				Class.forName(config.get("hibernate.connection.driver_class"));
			} catch (Exception e) {
				errorMessage = "Unable to load JDBC driver for selected database. Make sure that you have placed the driver archive file(s) into the class path for your J2EE application server and restart the application server." ;
				log.error(errorMessage,e) ;
				isConnected = false ;
			}
		}

		java.sql.Connection dbConnection = null ;
		if (isConnected) {
			try {
				// Attempt to connect to the database using the provided configuration settings
				dbConnection = java.sql.DriverManager.getConnection(
						config.get("hibernate.connection.url"),
						config.get("hibernate.connection.username"),
						config.get("hibernate.connection.password")) ;
			} catch (Exception e) {
				errorMessage = "Unable to connect to the database using the options provided. The error message was '"+e.getLocalizedMessage()+"'" ;
				log.error(errorMessage,e) ;
				isConnected = false ;
			}
		}

		if (isConnected) {
			try {
				// Test the connection by running a test query
				java.sql.Statement st = dbConnection.createStatement() ;
				java.sql.ResultSet rs = st.executeQuery("SELECT '1' AS \"testval\"") ;
				while (rs.next()) {
					int test = rs.getInt("testval") ;
					if (test!=1) {
						isConnected = false ;
						errorMessage = "Unable to run a test query against the database." ;
					}
				}
			} catch (Exception e) {
				isConnected = false ;
				errorMessage = "Unable to run a test query against the database." ;
				log.error(errorMessage,e) ;
			}
		}

		// If all tests succeed, the change the button to allow progress to the next step and save the settings
		if (isConnected) {
			dbConnection.close() ;
			dbConnection = null ;
			success.setVisible(true) ;
			nextButton.setLabel("Step 2 >>") ;
			dbIsGood = true ;
		} else {	// Otherwise, show the user a userful error which might help get the settings corrected
			Messagebox.show(errorMessage+" Relevent portions of the error have been logged.","Database Error",Messagebox.OK,Messagebox.ERROR) ;
		}
	}
	]]></zscript>
	<hbox>
		<vbox width="160px">
			<label value="Database Platform: "/>
		</vbox>
		<vbox>
			<listbox id="dbtype" rows="1" mold="select" onSelect="setRetest();" >
				<listitem label="PostgreSQL" value="postgresql" selected="true"/>
				<listitem label="MySQL" value="mysql"/>
				<listitem label="Microsoft SQL Server" value="sqlserver"/>
				<listitem label="DB2" value="db2"/>
				<listitem label="Oracle" value="oracle:thin"/>
			</listbox>
		</vbox>
	</hbox>
	<hbox>
		<vbox width="160px">
			<label value="Database Host[:Port]: "/>
		</vbox>
		<vbox>
			<textbox id="dbhost" width="160px" onChange="setRetest();" tooltiptext="The IP address or fully qualified hostname of the database server."/>
		</vbox>
	</hbox>
	<hbox>
		<vbox width="160px">
			<label value="Database Name: "/>
		</vbox>
		<vbox>
			<textbox id="dbname" width="160px" onChange="setRetest();" tooltiptext="The name of the database, may be case sensitive."/>
		</vbox>
	</hbox>
	<hbox>
		<vbox width="160px">
			<label value="Database User: "/>
		</vbox>
		<vbox>
			<textbox id="dbuser" width="160px" onChange="setRetest();" tooltiptext="The username to use to authenticate to the database server"/>
		</vbox>
	</hbox>
	<hbox>
		<vbox width="160px">
			<label value="Database Password: "/>
		</vbox>
		<vbox>
			<textbox id="dbpass" type="password" value="" width="160px" onChange="setRetest();" tooltiptext="The password to use to authenticate to the database server"/>
		</vbox>
	</hbox>
	<hbox>
		<vbox width="160px">
			<label value="Search Index Directory: "/>
		</vbox>
		<vbox>
			<textbox id="luceneDir" value="/var/lucene/indexes" width="160px" onChange="setRetest();" tooltiptext="Where to store the search indices."/>
		</vbox>
	</hbox>
	<hbox>
		<label id="jdbcUrl" style="font-weight: bold; color: blue;" />
	</hbox>
	<hbox align="center">
		<vbox width="160px">
			<button id="nextButton" onClick="buttonPressed();" label="Test Connection" />
		</vbox>
	</hbox>
	<hbox align="center">
		<label visible="false" id="success" value="Database connection established successfully!" style="font-size: 14pt; color: #00AA00;"/>
	</hbox>
	<window id="initInstructions" mode="modal" title="Instructions" width="500px">
		<vbox>
			<label value="This screen will prompt you for information on creating the database schema for the application. The database itself must already exist and have proper permissions for the specified user to be able to create the tables, sequences, and views." />
			<button label="Close" onClick="closeInstructions()" />
		</vbox>
	</window>
</vbox>